<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments">Modify Sprint Name Every Sprint, Modify Authorization if Password changes, Account ID is from the Config Exported for that specific account</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="sprintName" elementType="Argument">
            <stringProp name="Argument.name">sprintName</stringProp>
            <stringProp name="Argument.value">${__P(sprintName,Sprint)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accountName" elementType="Argument">
            <stringProp name="Argument.name">accountName</stringProp>
            <stringProp name="Argument.value">${__P(accountName,test)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accountID_test" elementType="Argument">
            <stringProp name="Argument.name">accountID_test</stringProp>
            <stringProp name="Argument.value">1353266110</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accountID_customer1" elementType="Argument">
            <stringProp name="Argument.name">accountID_customer1</stringProp>
            <stringProp name="Argument.value">1191970554</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Authorization_test" elementType="Argument">
            <stringProp name="Argument.name">Authorization_test</stringProp>
            <stringProp name="Argument.value">Basic dGVzdEBhYmhpbGdvdTpVYmVyMTIz</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Authorization_customer1" elementType="Argument">
            <stringProp name="Argument.name">Authorization_customer1</stringProp>
            <stringProp name="Argument.value">Basic YWJoaWxnb3VAY3VzdG9tZXIxOlViZXIxMjMh</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="configExporterVersion" elementType="Argument">
            <stringProp name="Argument.name">configExporterVersion</stringProp>
            <stringProp name="Argument.value">4.5.2.1-BETA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userName" elementType="Argument">
            <stringProp name="Argument.name">userName</stringProp>
            <stringProp name="Argument.value">abhilgou</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AppD_ApplicationBackup_Exporter" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1535546643000</longProp>
        <longProp name="ThreadGroup.end_time">1535546643000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Execute only with 1 user 1 loop count</stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell - Update Account ID" enabled="true">
          <stringProp name="TestPlan.comments">test-1353266110 customer1-1191970554</stringProp>
          <stringProp name="BeanShellSampler.query">try{
	//fetch the variables into beanshell
	String accountName = vars.get(&quot;accountName&quot;);
	String accountID_customer1 = vars.get(&quot;accountID_customer1&quot;);
	String accountID_test = vars.get(&quot;accountID_test&quot;);
	
	log.info(&quot;------------------accountNameCaptured-------------------&quot;+accountName);
	//change account id based on the account name
	if(accountName.equals(&quot;customer1&quot;))
	{
		vars.put(&quot;accountID&quot;, accountID_customer1);
		log.info(&quot;------------------customer1----------------&quot;+vars.get(&quot;accountID&quot;));
	}
	else if(accountName.equals(&quot;test&quot;))
	{
		vars.put(&quot;accountID&quot;, accountID_test);
		log.info(&quot;------------------test----------------&quot;+vars.get(&quot;accountID&quot;));
	}
}


catch (Throwable ex) {
    log.error(&quot;Error in Account ID beanshell. Please verify Account ID&quot;, ex);
    throw ex;
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Application IDs" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="cache" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">cache</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/${configExporterVersion}/api/controllers/${accountID}/applications</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Config Exporter Service to fetch all application list</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - applicationID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">applicationID</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="TestPlan.comments">Match : -1 for all matches</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - applicationName" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">applicationName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="TestPlan.comments">Match : -1 for all matches</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell - Create Folders" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.*;
import java.lang.*;
import org.apache.jmeter.gui.GuiPackage;
import org.apache.commons.io.FilenameUtils;
import org.apache.jmeter.services.FileServer;
try{
	
//Below line works for GUI only
//String backupFile = GuiPackage.getInstance().getTestPlanFile();

//Below for both GUI and Non GUI
String backupFile = FileServer.getFileServer().getBaseDir()+File.separator + FileServer.getFileServer().getScriptName();
String backupDir = FilenameUtils.getFullPath(backupFile);
String backupPrefix=backupDir+&quot;AppdynamicsConfigBackup_&quot;+&quot;${sprintName}&quot;+&quot;_${accountName}_&quot;+&quot;${__time(ddMMyyyy-hhmm)}&quot;;

vars.put(&quot;backupDir&quot;, backupDir);
vars.put(&quot;backupPrefix&quot;, backupPrefix);

//Create a new folder
boolean success=new File(backupPrefix).mkdirs();

if(!success) {log.error(&quot;--------------------Folder Creation Failed---------&quot;+backupPrefix);}
else{log.info(&quot;------------------Folder Creation Successful-------&quot;+backupPrefix);}


//Create Application List
for(i=1; i &lt; ${applicationID_matchNr};i++)

{
String varID = vars.get(&quot;applicationID_&quot;+i);
String varName = vars.get(&quot;applicationName_&quot;+i);

//f = new FileOutputStream(backupDir+&quot;ApplicationList.csv&quot;, true);
f = new FileOutputStream(backupPrefix+&quot;/ApplicationList.csv&quot;, true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(varID + &quot;,&quot;+varName);
}

}
catch (Throwable ex) {
    log.error(&quot;Error in Folder Creation Beanshell&quot;, ex);
    throw ex;
}

 finally 
{
            // close the streams using close method
            try 
            {
              if (f != null || p != null) 
              	{
              		
                    f.close();
                    p.close();
                    log.info(&quot;------------Config------In Finally F not empty closed both-------&quot;);
               }
            }
            catch (IOException ioe) 
            {
                System.out.println(&quot;Error while closing stream: &quot; + ioe);
            }
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="TestPlan.comments">${applicationID_matchNr} - count of total number of application </stringProp>
          <stringProp name="LoopController.loops">${applicationID_matchNr}</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter - applicationID_index" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">1000</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">applicationID_index</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Backup" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="applicationId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__V(applicationID_${applicationID_index})}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">applicationId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/${configExporterVersion}/api/controllers/${accountID}/files/app-config</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Failed Responses" enabled="true">
              <stringProp name="FileSaver.filename">${backupPrefix}/Failed_${sprintName}_${__V(applicationName_${applicationID_index})}_${__V(applicationID_${applicationID_index})}_${__time(ddMM)}</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.skipautonumber">true</boolProp>
              <boolProp name="FileSaver.skipsuffix">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Successful Responses" enabled="true">
              <stringProp name="FileSaver.filename">${backupPrefix}/${sprintName}_${__V(applicationName_${applicationID_index})}_${__V(applicationID_${applicationID_index})}_${__time(ddMM)}</stringProp>
              <boolProp name="FileSaver.errorsonly">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">true</boolProp>
              <boolProp name="FileSaver.skipsuffix">true</boolProp>
              <boolProp name="FileSaver.successonly">true</boolProp>
            </ResultSaver>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1252199053">&quot;applicationId&quot; :</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Rename to JSON" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">CMD</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="C:\Windows\System32" elementType="Argument">
                <stringProp name="Argument.name">C:\Windows\System32</stringProp>
                <stringProp name="Argument.value">/C</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="C:\Windows\System32" elementType="Argument">
                <stringProp name="Argument.name">C:\Windows\System32</stringProp>
                <stringProp name="Argument.value">rename ${backupPrefix}\*. *.json </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">C:\Windows\System32</stringProp>
          <stringProp name="TestPlan.comments">rename all files to JSON</stringProp>
        </SystemSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>false</success>
              <label>false</label>
              <code>false</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <url>true</url>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AppD_DashboardBackup_Exporter" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1535546643000</longProp>
        <longProp name="ThreadGroup.end_time">1535546643000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell - Update Account ID" enabled="true">
          <stringProp name="TestPlan.comments">test-1353266110 customer1-1191970554</stringProp>
          <stringProp name="BeanShellSampler.query">try{
	//fetch the variables into beanshell
	String accountName = vars.get(&quot;accountName&quot;);
	String Authorization_customer1 = vars.get(&quot;Authorization_customer1&quot;);
	String Authorization_test = vars.get(&quot;Authorization_test&quot;);

	//change account id based on the account name
	log.info(&quot;------------------accountNameCaptured------------&quot;+accountName);
	if(accountName.equals(&quot;customer1&quot;))
	{
		vars.put(&quot;p_authorization&quot;, Authorization_customer1);
		log.info(&quot;------------------customer1-------------&quot;+vars.get(&quot;p_authorization&quot;));
	}
	else if(accountName.equals(&quot;test&quot;))
	{
		vars.put(&quot;p_authorization&quot;, Authorization_test);
		log.info(&quot;------------------test---------------&quot;+vars.get(&quot;p_authorization&quot;));
	}
}


catch (Throwable ex) {
    log.error(&quot;Error in Contoller ID beanshell&quot;, ex);
    throw ex;
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authenticate User" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="action" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">login</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">action</stringProp>
              </elementProp>
              <elementProp name="userName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${userName}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">userName</stringProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">VWJlcjEyMyE=</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
              </elementProp>
              <elementProp name="accountName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${accountName}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">accountName</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">appdcontrol.tele2.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/controller/auth</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Change Username and PAssword (Base 64 Encoded)</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Request Headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${p_authorization}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor -c_X-CSRF-TOKEN" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">c_X-CSRF-TOKEN</stringProp>
            <stringProp name="RegexExtractor.regex">X-CSRF-TOKEN=(.*);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Dashboards IDs" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">appdcontrol.tele2.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/controller/restui/dashboards/getAllDashboardsByType/false</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Request Headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${p_authorization}</stringProp>
              </elementProp>
              <elementProp name="X-CSRF-TOKEN" elementType="Header">
                <stringProp name="Header.name">X-CSRF-TOKEN</stringProp>
                <stringProp name="Header.value">${c_X-CSRF-TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - dashboardId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">dashboardId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - dashboardName" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">dashboardName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell - Create Folders" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.*;
import java.lang.*;
import org.apache.jmeter.gui.GuiPackage;
import org.apache.commons.io.FilenameUtils;
import org.apache.jmeter.services.FileServer;
try{
	
//Below line works for GUI only
//String backupFile = GuiPackage.getInstance().getTestPlanFile();

//Below for both GUI and Non GUI
String backupFile = FileServer.getFileServer().getBaseDir()+File.separator + FileServer.getFileServer().getScriptName();
String backupDir = FilenameUtils.getFullPath(backupFile);
String backupPrefix=backupDir+&quot;AppdynamicsDashboardBackup_&quot;+&quot;${sprintName}&quot;+&quot;_${accountName}_&quot;+&quot;${__time(ddMMyyyy-hhmm)}&quot;;

vars.put(&quot;backupDir&quot;, backupDir);
vars.put(&quot;backupPrefix&quot;, backupPrefix);

//Create a new folder
boolean success=new File(backupPrefix).mkdirs();

if(!success) {log.error(&quot;--------------------Folder Creation Failed------------&quot;+backupPrefix);}
else{log.info(${dashboardId_matchNr}+&quot;------------------Folder Creation Successful----------&quot;+backupPrefix);}


//Create Dashboard List
for(i=1; i &lt; ${dashboardId_matchNr};i++)

{
String varID = vars.get(&quot;dashboardId_&quot;+i);
String varName = vars.get(&quot;dashboardName_&quot;+i);

//f = new FileOutputStream(backupDir+&quot;ApplicationList.csv&quot;, true);
f = new FileOutputStream(backupPrefix+&quot;/DashboardList.csv&quot;, true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(varID + &quot;,&quot;+varName);
}
}
catch (Throwable ex) {
    log.error(&quot;Error in Folder Creation Beanshell&quot;, ex);
    throw ex;
}
/*
 finally 
{
            // close the streams using close method
            try 
            {
              if (f != null || p != null) 
              	{
              		
                    f.close();
                    p.close();
                    log.info(&quot;------Dashboard------------In Finally F not empty closed both-------&quot;);
               }
            }
            catch (IOException ioe) 
            {
                System.out.println(&quot;Error while closing stream: &quot; + ioe);
            }
}
*/
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="TestPlan.comments">${dashboardId_matchNr} - count of total number of dashboards </stringProp>
          <stringProp name="LoopController.loops">${dashboardId_matchNr}</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter - dashboardId_index" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">1000</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">dashboardId_index</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Dashboard" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="dashboardId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__V(dashboardId_${dashboardId_index})}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dashboardId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">appdcontrol.tele2.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">controller/CustomDashboardImportExportServlet</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">/controller/CustomDashboardImportExportServlet?dashboardId=8</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Request Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${p_authorization}</stringProp>
                </elementProp>
                <elementProp name="X-CSRF-TOKEN" elementType="Header">
                  <stringProp name="Header.name">X-CSRF-TOKEN</stringProp>
                  <stringProp name="Header.value">${c_X-CSRF-TOKEN}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="847900399">&quot;name&quot; :</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Failed Responses" enabled="true">
              <stringProp name="FileSaver.filename">${backupPrefix}/Failed_${sprintName}_${__V(dashboardName_${dashboardId_index})}_${__V(dashboardId_${dashboardId_index})}_${__time(ddMM)}</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.skipautonumber">true</boolProp>
              <boolProp name="FileSaver.skipsuffix">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Successful Responses" enabled="true">
              <stringProp name="FileSaver.filename">${backupPrefix}/${sprintName}_${__V(dashboardName_${dashboardId_index})}_${__V(dashboardId_${dashboardId_index})}_${__time(ddMM)}</stringProp>
              <boolProp name="FileSaver.errorsonly">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">true</boolProp>
              <boolProp name="FileSaver.skipsuffix">true</boolProp>
              <boolProp name="FileSaver.successonly">true</boolProp>
            </ResultSaver>
            <hashTree/>
          </hashTree>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Rename to JSON" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">CMD</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="C:\Windows\System32" elementType="Argument">
                <stringProp name="Argument.name">C:\Windows\System32</stringProp>
                <stringProp name="Argument.value">/C</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="C:\Windows\System32" elementType="Argument">
                <stringProp name="Argument.name">C:\Windows\System32</stringProp>
                <stringProp name="Argument.value">rename ${backupPrefix}\*.* *.json </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">C:\Windows\System32</stringProp>
        </SystemSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>false</success>
              <label>false</label>
              <code>false</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
